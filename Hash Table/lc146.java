class LRUCache {    class Item {        public int value;        public int age;        public Item (int value, int age) {            this.value = value;            this.age = age;        }    }    private HashMap<int, Item> cache = new HashMap<int, Item>();    private size;    public LRUCache(int capacity) {        this.size = capacity;    }    public void incrementAges() {        for (int key: this.cache.keySet()) {            this.cache.get(key).value++;        }    }    public int getLeastUsedKey() {        int leastUsedKey = -1;        int age = -1;        for (int key: this.cache.keySet()) {            if (age < this.cache.get(key).age) {                age = this.cache.get(key).age;                leastUsedKey = key;            }        }        return leastUsedKey;    }    public int get(int key) {        if (this.cache.containsKey(key)) {            this.cache.put(key, 1);        }        if (cache.containsKey()) {            return cache.get(key);        }        return 0;    }    public void put(int key, int value) {    }}class Solution {    public static void main(String args[]) {        LRUCache obj = new LRUCache(capacity);        int param_1 = obj.get(key);        obj.put(key,value);    }}/** * Your LRUCache object will be instantiated and called as such: * LRUCache obj = new LRUCache(capacity); * int param_1 = obj.get(key); * obj.put(key,value); */