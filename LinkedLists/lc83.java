//83. Remove Duplicates from Sorted List//        Solved//        Easy//        Topics//        Companies//        Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.////////        Example 1://////        Input: head = [1,1,2]//        Output: [1,2]//        Example 2://////        Input: head = [1,1,2,3,3]//        Output: [1,2,3]//////        Constraints:////        The number of nodes in the list is in the range [0, 300].//        -100 <= Node.val <= 100//        The list is guaranteed to be sorted in ascending order.////package LinkedLists;import java.util.HashMap;public class lc83 {    class Solution {//        public ListNode deleteDuplicates(ListNode head) {//            HashMap<Integer, Integer> occurrenceMap = new HashMap<>();//            ListNode temp = head;//            if (temp == null || temp.next == null) return head;//            occurrenceMap.put(temp.val, 1);//            while(temp != null && temp.next != null) {//                if (occurrenceMap.containsKey(temp.next.val)) {//                    temp.next = temp.next.next;//                } else {//                    occurrenceMap.put(temp.next.val, 1);//                }//                temp = temp.next;//            }//            return head;//        }        public ListNode deleteDuplicates(ListNode head) {            ListNode temp = head;            if (head == null || head.next == null) return head;            int current = head.val;            while (temp != null && temp.next != null) {                if (temp.next.val == current) {                    temp.next = temp.next.next;                } else {                    current = temp.next.val;                    temp = temp.next;                }            }            return head;        }    }}