package LinkedLists;import java.math.BigInteger;public class lc2 {    class Solution {        public ListNode addTwoNumbers(ListNode l1, ListNode l2) {            ListNode t1 = l1, t2 = l2;            int x, y, carry = 0;            ListNode result = new ListNode(0);            ListNode temp = result;            while (t1 != null || t2 != null) {                x = t1 != null ? t1.val : 0;                y = t2 != null ? t2.val : 0;                temp.next = new ListNode((x + y + carry) % 10);                carry = (x + y + carry) >= 10 ? (x + y + carry) / 10 : 0;                t1 = t1 != null ? t1.next : null;                t2 = t2 != null ? t2.next : null;                temp = temp.next;            }            if (carry > 0) {                temp.next = new ListNode(carry);            }            return result.next != null ? result.next : result;        }    }    class SolutionNotOptimal {        public BigInteger getNumberFromLinkedList(ListNode l) {            BigInteger num = new BigInteger("0");            int i = 0;            ListNode temp = l;            while (temp != null) {                num = num.add(BigInteger.valueOf((long) (temp.val * Math.pow(10, i))));                temp = temp.next;                i += 1;            }            return num;        }        public ListNode getListFromNumber(BigInteger num) {            ListNode result = new ListNode(0);            ListNode temp = result;            while (num.compareTo(BigInteger.ZERO) > 0) {                temp.next = new ListNode((int) (num.intValue() % 10));                num = BigInteger.valueOf(num.intValue() / 10);                temp = temp.next;            }            if (result.next == null)                return result;            return result.next;        }        public ListNode addTwoNumbers(ListNode l1, ListNode l2) {//            return getListFromNumber(getNumberFromLinkedList(l1).add(getNumberFromLinkedList(l2)));            ListNode t1 = l1, t2 = l2;            int x, y, carry = 0;            ListNode result = new ListNode(0);            ListNode temp = result;            while (t1 != null && t2 != null) {                x = t1 != null ? t1.val : 0;                y = t2 != null ? t2.val : 0;                carry = (x + y + carry) > 10 ? (x + y + carry) / 10 : 0;                temp.next = new ListNode((x + y + carry) % 10);                t1 = t1 != null ? t1.next : null;                t2 = t2 != null ? t2.next : null;            }            return result.next != null ? result.next : result;        }    }}