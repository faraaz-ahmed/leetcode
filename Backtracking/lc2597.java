package Backtracking;import java.util.ArrayList;import java.util.Arrays;import java.util.List;class Solution {    int count;    public Boolean checkBeauty(List<Integer> arr, int x, int k) {        if (arr.size() == 0) {            return false;        }        for (int i = 0; i < arr.size(); i++) {            if (k == Math.abs(x - arr.get(i))) {                return false;            }        }        return true;    }    public void backtrack(int[] nums, int currentIndex, int k, List<Integer> currentList) {        if (currentIndex == nums.length) {            return;        }        backtrack(nums,currentIndex + 1, k, new ArrayList(currentList));        currentList.add(nums[currentIndex]);        if (checkBeauty(currentList, nums[currentIndex], k)) {            count++;            backtrack(nums,currentIndex + 1, k, new ArrayList(currentList));        }    }    public int beautifulSubsets(int[] nums, int k) {        List<Integer> currentList = new ArrayList<>();        Arrays.sort(nums);        backtrack(nums, 0, k, currentList);        return count;    }}