package BinarySearch;import java.util.Arrays;public class lc888 {    class Solution {        public int binarySearch(int[] arr, int target) {            int start = 0, end = arr.length - 1;            while (start <= end) {                int mid = start + (end - start) / 2;                if (arr[mid] == target) return mid;                else if (target > arr[mid]) start = mid + 1;                else end = mid - 1;            }            return -1;        }        public int[] fairCandySwap(int[] aliceSizes, int[] bobSizes) {            int totalAliceCandies = 0, totalBobCandies = 0;            for (int size: aliceSizes) totalAliceCandies += size;            for (int size: bobSizes) totalBobCandies += size;            Arrays.sort(aliceSizes);            Arrays.sort(bobSizes);            for (int size: aliceSizes) {                int toFind = (int) ((totalBobCandies - totalAliceCandies + (2 * size)) / 2);                int searchIndex = binarySearch(bobSizes, toFind);                if (searchIndex != -1) return Arrays.asList(size, bobSizes[searchIndex]).stream().mapToInt(i->i).toArray();            }            return new int[2];        }    }}