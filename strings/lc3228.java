//3228. Maximum Number of Operations to Move Ones to the End//Attempted//        Medium//Companies//        Hint//You are given a//binary string//s.////You can perform the following operation on the string any number of times:////Choose any index i from the string where i + 1 < s.length such that s[i] == '1' and s[i + 1] == '0'.//Move the character s[i] to the right until it reaches the end of the string or another '1'. For example, for s = "010010", if we choose i = 1, the resulting string will be s = "000110".//        Return the maximum number of operations that you can perform.////////        Example 1:////Input: s = "1001101"////Output: 4////Explanation:////We can perform the following operations:////Choose index i = 0. The resulting string is s = "0011101".//Choose index i = 4. The resulting string is s = "0011011".//Choose index i = 3. The resulting string is s = "0010111".//Choose index i = 2. The resulting string is s = "0001111".//Example 2:////Input: s = "00111"////Output: 0////////Constraints:////        1 <= s.length <= 105//s[i] is either '0' or '1'.package strings;public class lc3228 {    class Solution { //TLE        public int maxOperationsDriver(String s, int count) {            for (int i = 0; i < s.length() - 1; i++) {                if (s.charAt(i) == '1' && s.charAt(i + 1) == '0') {                    int j = i + 1;                    while (j < s.length() && s.charAt(j) == '0') {                        j++;                    }                    j--;                    if (j < s.length()) {                        return maxOperationsDriver(                                STR."\{s.substring(0, i)}0\{s.substring(i + 1, j)}1\{s.substring(j + 1,                                                                                                 s.length())}",                                count + 1);                    } else {                        return maxOperationsDriver(                                STR."\{s.substring(0, i)}0\{s.substring(i + 1, j)}1",                                count + 1);                    }                }            }            return count;        }        public int maxOperationsOptimized(String s) {            int onesSoFar = 0, result = 0;            for (int i = 0; i < s.length(); i++) {                if (s.charAt(i) == '1') {                    if (i > 0 && s.charAt(i - 1) == '0') result += onesSoFar;                    onesSoFar++;                }            }            if (s.charAt(s.length() - 1) == '0') result += onesSoFar;            return result;        }        public int maxOperations(String s) {            return maxOperationsOptimized(s);        }    }}