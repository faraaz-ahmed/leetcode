//22. Generate Parentheses//        Solved//        Medium//        Topics//        Companies//        Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.////////        Example 1:////        Input: n = 3//        Output: ["((()))","(()())","(())()","()(())","()()()"]//        Example 2:////        Input: n = 1//        Output: ["()"]//////        Constraints:////        1 <= n <= 8package strings;import java.util.ArrayList;import java.util.List;public class lc22 {    class Solution {        List<String> result = new ArrayList<>();        public void recursion(int open, int close, String s) {            if (open == 0 && close == 0) {                result.add(s);                return;            }            if (open >= 0) {                recursion(open - 1, close, s + "(");            }            if (open < close) {                recursion(open, close - 1, s + ")");            }        }        public List<String> generateParenthesis(int n) {            recursion(n, n, "");            return result;        }    }}