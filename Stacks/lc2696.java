//2696. Minimum String Length After Removing Substrings//        Solved//        Easy//        Topics//        Companies//        Hint//        You are given a string s consisting only of uppercase English letters.////        You can apply some operations to this string where, in one operation, you can remove any occurrence of one of the substrings "AB" or "CD" from s.////        Return the minimum possible length of the resulting string that you can obtain.////        Note that the string concatenates after removing the substring and could produce new "AB" or "CD" substrings.////////        Example 1:////        Input: s = "ABFCACDB"//        Output: 2//        Explanation: We can do the following operations://        - Remove the substring "ABFCACDB", so s = "FCACDB".//        - Remove the substring "FCACDB", so s = "FCAB".//        - Remove the substring "FCAB", so s = "FC".//        So the resulting length of the string is 2.//        It can be shown that it is the minimum length that we can obtain.//        Example 2:////        Input: s = "ACBBD"//        Output: 5//        Explanation: We cannot do any operations on the string so the length remains the same.//////        Constraints:////        1 <= s.length <= 100//        s consists only of uppercase English letters.package Stacks;import java.util.Stack;public class lc2696 {    class Solution {        public int minLength(String s) {            Stack<Character> stack = new Stack<>();            stack.push(s.charAt(0));            for (int i = 1; i < s.length(); i++) {                if (stack.size() == 0) {                    stack.push(s.charAt(i));                    continue;                }                if ((stack.peek() == 'A' && s.charAt(i) == 'B') || (stack.peek() == 'C' && s.charAt(i) == 'D')) {                    stack.pop();                } else {                    stack.push(s.charAt(i));                }            }            return stack.size();        }    }    class SolutionBruteForce {        public String cleanUp(String s) {            String result = s;            for (int i = 1; i < result.length(); i++) {                if ((result.charAt(i - 1) == 'A' && result.charAt(i) == 'B') || (result.charAt(i - 1) == 'C' && result.charAt(i) == 'D')) {                    result = result.substring(0, i - 1) + result.substring(i + 1);                }            }            return result;        }        public int minLength(String s) {            while (true) {                String s2 = cleanUp(s);                if (s2.length() == s.length()) {                    break;                } else {                    s = s2;                }            }            return s.length();        }    }}