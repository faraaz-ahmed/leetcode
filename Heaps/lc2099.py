# 2099. Find Subsequence of Length K With the Largest Sum# Solved# Easy# Topics# Companies# Hint# You are given an integer array nums and an integer k. You want to find a subsequence of nums of length k that has the largest sum.## Return any such subsequence as an integer array of length k.## A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.#### Example 1:## Input: nums = [2,1,3,3], k = 2# Output: [3,3]# Explanation:# The subsequence has the largest sum of 3 + 3 = 6.# Example 2:## Input: nums = [-1,-2,3,4], k = 3# Output: [-1,3,4]# Explanation:# The subsequence has the largest sum of -1 + 3 + 4 = 6.# Example 3:## Input: nums = [3,4,3,3], k = 2# Output: [3,4]# Explanation:# The subsequence has the largest sum of 3 + 4 = 7.# Another possible subsequence is [4, 3].### Constraints:## 1 <= nums.length <= 1000# -105 <= nums[i] <= 105# 1 <= k <= nums.lengthimport copyclass Solution:    def maxSubsequenceV0(self, nums: List[int], k: int) -> List[int]:        for i in range(0, len(nums)):            nums[i] = (-nums[i], i)        heapq.heapify(nums)        sorted_nums = []        for i in range(0, k):            sorted_nums.append(heapq.heappop(nums))        sorted_nums = sorted(sorted_nums, key=lambda x: x[1])        result = []        for num in sorted_nums:            result.append(-num[0])        return result    def maxSubsequence(self, nums: List[int], k: int) -> List[int]:        heap = copy.deepcopy(nums)        heapq.heapify(heap)        for i in range(0, len(nums) - k):            heapq.heappop(heap)        result = []        for num in nums:            if (num in heap):                result.append(num)                heap.remove(num)                if (len(heap) == 0):                    break;        return result