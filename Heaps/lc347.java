//347. Top K Frequent Elements//        Solved//        Medium//        Topics//        Companies//        Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.////////        Example 1:////        Input: nums = [1,1,1,2,2,3], k = 2//        Output: [1,2]//        Example 2:////        Input: nums = [1], k = 1//        Output: [1]//////        Constraints:////        1 <= nums.length <= 105//        -104 <= nums[i] <= 104//        k is in the range [1, the number of unique elements in the array].//        It is guaranteed that the answer is unique.//////        Follow up: Your algorithm's time complexity must be better than O(n log n), where n is the array's size.package Heaps;import java.util.HashMap;import java.util.PriorityQueue;import java.util.Queue;public class lc347 {    class Solution {        record ElementFrequency(int value, int frequency) {        }        public int[] topKFrequent(int[] nums, int k) {            Queue<ElementFrequency> heap = new PriorityQueue<>(                    (x, y) -> -Integer.compare(x.frequency(), y.frequency())            );            HashMap<Integer, Integer> map = new HashMap<>();            int[] result = new int[k];            for (int num: nums)                map.put(num, map.getOrDefault(num, 0) + 1);            for (Integer key: map.keySet())                heap.add(new ElementFrequency(key, map.get(key)));            for (int i = 0; i < k; i++)                result[i] = heap.remove().value();            return result;        }    }}