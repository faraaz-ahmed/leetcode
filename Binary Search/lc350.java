import java.util.ArrayList;import java.util.Arrays;import java.util.List;import java.util.stream.Collectors;class lc350 {    public int binarySearch(List<Integer> nums, int number) {        int start = 0;        int end = nums.size();        while (start <= end && start < nums.size()) {            int mid = start + (end - start) / 2;            if (nums.get(mid) == number) {                return mid;            } else if (nums.get(mid) > number) {                end = mid - 1;            } else {                start = mid + 1;            }        }        return -1;    }    public int[] intersect(int[] nums1, int[] nums2) {        Arrays.sort(nums2);        List<Integer> numsList2 = Arrays.stream(nums2).boxed().collect(Collectors.toList());        List<Integer> result = new ArrayList<Integer>();        for (int i = 0; i < nums1.length; i++) {            int searchIndex = binarySearch(numsList2, nums1[i]);            if (searchIndex >= 0) {                result.add(nums1[i]);                numsList2.remove(searchIndex);            }        }        return result.stream().mapToInt(i->i).toArray();    }}